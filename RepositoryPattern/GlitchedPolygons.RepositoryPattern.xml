<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlitchedPolygons.RepositoryPattern</name>
    </assembly>
    <members>
        <member name="T:GlitchedPolygons.RepositoryPattern.IEntity`1">
            <summary>
            Uniquely identifiable entity inside a repository.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.RepositoryPattern.IEntity`1.Id">
            <summary>
            Gets or sets the entity's unique identifier.
            </summary>
            <value>The entity's unique id.</value>
        </member>
        <member name="T:GlitchedPolygons.RepositoryPattern.IRepository`2">
            <summary>
            Generic repository base interface for holding any type of uniquely identifiable <see cref="T:GlitchedPolygons.RepositoryPattern.IEntity`1"/>.
            Typically used for database access routines.
            </summary>
            <typeparam name="T1">The type of entity that the repository is going to store.</typeparam>
            <typeparam name="T2">The type of unique id that the repository's entities will have (e.g. guid <c>string</c>, <c>int</c>, etc...).</typeparam>
        </member>
        <member name="P:GlitchedPolygons.RepositoryPattern.IRepository`2.Item(`1)">
            <summary>
            Gets the entity of type <typeparamref name="T1"/> with the specified unique identifier (synchronously).
            </summary>
            <param name="id">The entity's unique identifier.</param>
            <returns>The first found entity; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Get(`1)">
            <summary>
            Gets an entity by its unique identifier.
            </summary>
            <param name="id">The entity's unique identifier.</param>
            <returns>The first found <see cref="T:GlitchedPolygons.RepositoryPattern.IEntity`1"/>; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.GetAll">
            <summary>
            Gets all entities from the repository.
            </summary>
            <returns>All entities inside the repo.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets a single entity from the repo according to the specified predicate condition.<para> </para>
            If 0 or >1 entities are found, <c>null</c> is returned.
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>Single found entity; <c>null</c> if 0 or >1 entities were found.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds all entities according to the specified predicate <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="predicate">The search predicate (all entities that match the provided conditions will be added to the query's result).</param>
            <returns>The found entities (<see cref="T:System.Collections.Generic.IEnumerable`1"/>).</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Add(`0)">
            <summary>
            Adds the specified entity to the data repository.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>Whether the entity could be added successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple entities at once.
            </summary>
            <param name="entities">The entities to add.</param>
            <returns>Whether the entities were added successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Update(`0)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity to update.</param>
            <returns>Whether the entity could be updated successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Remove(`0)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>Whether the entity could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.Remove(`1)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="id">The unique id of the entity to remove.</param>
            <returns>Whether the entity could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.RemoveAll">
            <summary>
            Removes all entities at once from the repository.
            </summary>
            <returns>Whether the entities were removed successfully or not. If the repository was already empty, <c>false</c> is returned (because nothing was actually &lt;&lt;removed&gt;&gt; ).</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.RemoveRange(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Removes all entities that match the specified conditions (via the predicate <see cref="T:System.Linq.Expressions.Expression"/> parameter).
            </summary>
            <param name="predicate">The predicate <see cref="T:System.Linq.Expressions.Expression"/> that defines which entities should be removed.</param>
            <returns>Whether the entities were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range of entities from the repository.
            </summary>
            <param name="entities">The entities to remove.</param>
            <returns>Whether the entities were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.RepositoryPattern.IRepository`2.RemoveRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes the range of entities from the repository.
            </summary>
            <param name="ids">The unique ids of the entities to remove.</param>
            <returns>Whether all entities were removed successfully or not.</returns>
        </member>
    </members>
</doc>
